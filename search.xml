<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>EasyDown 学习记录</title>
    <url>/EasyDown.html</url>
    <content><![CDATA[<p>基于Unity的真男人就下一百层的2D小游戏</p>
<a id="more"></a>

<h2 id="背景移动的实现"><a href="#背景移动的实现" class="headerlink" title="背景移动的实现"></a>背景移动的实现</h2><h3 id="脚本控制Material的Offset"><a href="#脚本控制Material的Offset" class="headerlink" title="脚本控制Material的Offset"></a>脚本控制Material的Offset</h3><h4 id="1-脚本获取Quard的Material"><a href="#1-脚本获取Quard的Material" class="headerlink" title="1.脚本获取Quard的Material"></a>1.脚本获取Quard的Material</h4><p>​    因为Quard上并没有Material的项目，而是通过Mesh Renderer调整材质，所以需要用：</p>
<pre><code class="line-numbers language-c#">material = GetComponent&lt;Renderer&gt;().material;</code></pre>
<h4 id="2-脚本控制Material的Offset"><a href="#2-脚本控制Material的Offset" class="headerlink" title="2.脚本控制Material的Offset"></a>2.脚本控制Material的Offset</h4><p>​    由<strong>public</strong> Vector2 speed来控制Vecotr2 movement的变化，再用movement将值通过Material的mainTextureOffset方法传入。</p>
<pre><code class="line-numbers language-c#">movement += speed * Time.deltaTime;
material.mainTextureOffset = movement;</code></pre>
<h2 id="几种平台功能的实现"><a href="#几种平台功能的实现" class="headerlink" title="几种平台功能的实现"></a>几种平台功能的实现</h2><h3 id="翻转平台"><a href="#翻转平台" class="headerlink" title="翻转平台"></a>翻转平台</h3><p>​    通过Hinge Joint实现，不用代码</p>
<h3 id="弹跳平台"><a href="#弹跳平台" class="headerlink" title="弹跳平台"></a>弹跳平台</h3><h4 id="1-弹跳动画切换"><a href="#1-弹跳动画切换" class="headerlink" title="1.弹跳动画切换"></a>1.弹跳动画切换</h4><p>​    在idle和run动画间切换，通过OnCollisionEnter2D方法检查碰撞和标签来通过Animator播放run动画</p>
<pre><code class="line-numbers language-c#">void OnCollisionEnter2D(Collision2D collision)
{
    if (collision.gameObject.CompareTag(&quot;Player&quot;))
    {
    animator.Play(&quot;FanPlatform_run&quot;);
    }
}</code></pre>
<h4 id="2-弹跳功能实现"><a href="#2-弹跳功能实现" class="headerlink" title="2.弹跳功能实现"></a>2.弹跳功能实现</h4><h3 id="摇摆铁锤"><a href="#摇摆铁锤" class="headerlink" title="摇摆铁锤"></a>摇摆铁锤</h3><p>​    通过Distance Joint实现摇摆功能</p>
<h2 id="平台控制"><a href="#平台控制" class="headerlink" title="平台控制"></a>平台控制</h2><h3 id="上升"><a href="#上升" class="headerlink" title="上升"></a>上升</h3><p>​    通过修改Position实现移动效果，因此需要<strong>Vector3</strong> Movement，并在Start方法中传入Movement.y，在Update方法中调用MovePlatform方法。</p>
<pre><code class="line-numbers language-c#">void MovePlatform()
{
    transform.position += movement * Time.deltaTime;
}</code></pre>
<h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p>​    为了避免随着游戏运行，平台一直上升的情况，需要设置临界点使平台消失。设置Empty为Topline，在代码中通过GameObject的Find方法获取。</p>
<pre><code class="line-numbers language-c#">topline = GameObject.Find(&quot;TopLine&quot;);</code></pre>
<p>​    在MovePlatform方法中添加销毁代码</p>
<pre><code class="line-numbers language-c#">if(transform.position.y &gt;= topline.transform.position.y)
{
  Destroy(gameObject);
}</code></pre>
]]></content>
      <categories>
        <category>Unity</category>
        <category>学习</category>
        <category>2D</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
