<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Insyent&#39;s Blog</title>
  
  <subtitle>In doing We learn</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://insyent.today/"/>
  <updated>2020-08-11T03:51:03.321Z</updated>
  <id>http://insyent.today/</id>
  
  <author>
    <name>Insyent</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EasyDown 学习记录</title>
    <link href="http://insyent.today/EasyDown.html"/>
    <id>http://insyent.today/EasyDown.html</id>
    <published>2020-07-18T02:57:11.000Z</published>
    <updated>2020-08-11T03:51:03.321Z</updated>
    
    <content type="html"><![CDATA[<p>基于Unity的真男人就下一百层的2D小游戏</p><p>素材是UnityAssetStore里免费的<a href="https://assetstore.unity.com/packages/2d/characters/pixel-adventure-1-155360" target="_blank" rel="noopener">Pixel Adventure 1</a></p><a id="more"></a><h2 id="背景移动的实现"><a href="#背景移动的实现" class="headerlink" title="背景移动的实现"></a>背景移动的实现</h2><h3 id="脚本控制Material的Offset"><a href="#脚本控制Material的Offset" class="headerlink" title="脚本控制Material的Offset"></a>脚本控制Material的Offset</h3><h4 id="1-脚本获取Quard的Material"><a href="#1-脚本获取Quard的Material" class="headerlink" title="1.脚本获取Quard的Material"></a>1.脚本获取Quard的Material</h4><p>​    因为Quard上并没有Material的项目，而是通过Mesh Renderer调整材质，所以需要用：</p><pre><code class="line-numbers language-c#">material = GetComponent&lt;Renderer&gt;().material;</code></pre><h4 id="2-脚本控制Material的Offset"><a href="#2-脚本控制Material的Offset" class="headerlink" title="2.脚本控制Material的Offset"></a>2.脚本控制Material的Offset</h4><p>​    由<strong>public</strong> Vector2 speed来控制Vecotr2 movement的变化，再用movement将值通过Material的mainTextureOffset方法传入。</p><pre><code class="line-numbers language-c#">movement += speed * Time.deltaTime;material.mainTextureOffset = movement;</code></pre><h2 id="几种平台功能的实现"><a href="#几种平台功能的实现" class="headerlink" title="几种平台功能的实现"></a>几种平台功能的实现</h2><h3 id="翻转平台"><a href="#翻转平台" class="headerlink" title="翻转平台"></a>翻转平台</h3><p>​    通过Hinge Joint实现，不用代码</p><h3 id="弹跳平台"><a href="#弹跳平台" class="headerlink" title="弹跳平台"></a>弹跳平台</h3><h4 id="1-弹跳动画切换"><a href="#1-弹跳动画切换" class="headerlink" title="1.弹跳动画切换"></a>1.弹跳动画切换</h4><p>​    在idle和run动画间切换，通过OnCollisionEnter2D方法检查碰撞和标签来通过Animator播放run动画</p><pre><code class="line-numbers language-c#">void OnCollisionEnter2D(Collision2D collision){    if (collision.gameObject.CompareTag(&quot;Player&quot;))    {        animator.Play(&quot;FanPlatform_run&quot;);    }}</code></pre><h4 id="2-弹跳功能实现"><a href="#2-弹跳功能实现" class="headerlink" title="2.弹跳功能实现"></a>2.弹跳功能实现</h4><p>​    OnCollisionEnter2D方法检测</p><pre><code class="line-numbers language-c#">private void OnCollisionEnter2D(Collision2D collision) {    if (collision.gameObject.CompareTag(&quot;Fan&quot;))    {        rb.velocity = new Vector2(rb.velocity.x, 10f);    }    }</code></pre><p><em>附：OnCollisionEnter和OnTriggerEnter的区别</em></p><p><img src="/EasyDown/1.png" alt></p><h3 id="摇摆铁锤"><a href="#摇摆铁锤" class="headerlink" title="摇摆铁锤"></a>摇摆铁锤</h3><h4 id="1-摇摆"><a href="#1-摇摆" class="headerlink" title="1.摇摆"></a>1.摇摆</h4><p>​    通过Distance Joint实现摇摆功能</p><h4 id="2-连线"><a href="#2-连线" class="headerlink" title="2.连线"></a>2.连线</h4><p>​    <del>可以用很多个Chain连接</del></p><p>​    使用Line Renderer组件来画线，通过代码获取顶点位置并设置进组件</p><p>​    <strong>缺点：虽然省了很多麻烦 但实在不美观</strong> 想要美化还需要制作新的Material</p><pre><code class="line-numbers language-c#">LineRenderer line;public Transform startPoint;public Transform endPoint;//start:line = GetComponent&lt;LineRenderer&gt;();//update:line.SetPosition(0,startPoint.position);line.SetPosition(1, endPoint.position);</code></pre><h3 id="平台控制"><a href="#平台控制" class="headerlink" title="平台控制"></a>平台控制</h3><h4 id="1-上升"><a href="#1-上升" class="headerlink" title="1.上升"></a>1.上升</h4><p>​    通过修改Position实现移动效果，因此需要<strong>Vector3</strong> Movement，并在Start方法中传入Movement.y，在Update方法中调用MovePlatform方法。</p><pre><code class="line-numbers language-c#">void MovePlatform(){    transform.position += movement * Time.deltaTime;}</code></pre><h4 id="2-销毁"><a href="#2-销毁" class="headerlink" title="2.销毁"></a>2.销毁</h4><p>​    为了避免随着游戏运行，平台一直上升的情况，需要设置临界点使平台消失。设置Empty为Topline，在代码中通过GameObject的Find方法获取。</p><pre><code class="line-numbers language-c#">topline = GameObject.Find(&quot;TopLine&quot;);</code></pre><p>​    在MovePlatform方法中添加销毁代码</p><pre><code class="line-numbers language-c#">if(transform.position.y &gt;= topline.transform.position.y){  Destroy(gameObject);}</code></pre><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><h3 id="站地检测"><a href="#站地检测" class="headerlink" title="站地检测"></a>站地检测</h3><p>​        通过Physics2D.OverlapCircle(vector2 point,float radius,int LayerMask)方法检测是否站地: 点、半径、图层，以地面检测点点为圆心作半径圆，检测地面图层</p><pre><code class="line-numbers language-c#">bool isOnGround;public float checkRadius;public LayerMask platform;public GameObject groundCheck;//Update:isOnGround = Physics2D.OverlapCircle(groundCheck.transform.position,checkRadius,platform);</code></pre><p>​        可以通过OnDrawGizmosSelected()可视化绘制一个圆用作checkRadius可视化范围检测</p><pre><code class="line-numbers language-c#">    private void OnDrawGizmosSelected()    {        Gizmos.color = Color.blue;        //如果使用DrawSphere则是实心的        Gizmos.DrawWireSphere(groundCheck.transform.position, checkRadius);    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于Unity的真男人就下一百层的2D小游戏&lt;/p&gt;
&lt;p&gt;素材是UnityAssetStore里免费的&lt;a href=&quot;https://assetstore.unity.com/packages/2d/characters/pixel-adventure-1-155360&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pixel Adventure 1&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Unity" scheme="http://insyent.today/categories/Unity/"/>
    
      <category term="学习" scheme="http://insyent.today/categories/Unity/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="2D" scheme="http://insyent.today/categories/Unity/%E5%AD%A6%E4%B9%A0/2D/"/>
    
    
      <category term="学习" scheme="http://insyent.today/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
